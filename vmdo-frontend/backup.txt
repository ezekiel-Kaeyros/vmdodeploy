 FROM node:18-alpine3.17 as angular

WORKDIR /app

COPY . .
RUN npm install --force
RUN npm run build

FROM httpd:alpine3.15

WORKDIR /usr/local/apache2/htdocs
COPY --from=angular /app/dist/test .



# Stage 1: Compile and Build angular codebase

# Use official node image as the base image
FROM node:18-alpine3.17 as build

# Set the working directory
WORKDIR /app

# Add the source code to app
COPY ./ /app/

# Install all the dependencies
RUN npm install --force

# Generate the build of the application
RUN npm run build


# Stage 2: Serve app with nginx server

# Use official nginx image as the base image
FROM nginx:latest

# COPY ./nginx.conf /etc/nginx/conf.d/nginx.conf

# Copy the build output to replace the default nginx contents.
COPY --from=build /app/dist/test /usr/share/nginx/html

# Expose port 80
EXPOSE 80




events{}

http {

    include /etc/nginx/mime.types;

    server {

        listen 80;

        server_name localhost;

        root /usr/share/nginx/html;

        index index.html;

        location / {

            try_files $uri $uri/ /index.html;

        }

    }

}









FROM node:12.14-alpine AS build
# Create a Virtual directory inside the docker image
WORKDIR /app
# Copy files to virtual directory
# COPY package.json package-lock.json ./
# Run command in Virtual directory
RUN npm cache clean --force
# Copy files from local machine to virtual directory in docker image
COPY ./ /app/
RUN npm install
RUN npm run build --prod --force


### STAGE 2:RUN ###
# Defining nginx image to be used
FROM nginx:latest AS ngi
# Copying compiled code and nginx config to different folder
# NOTE: This path may change according to your project's output folder 
#COPY --from=build /dist/src/app/dist/my-docker-angular-app /usr/share/nginx/html
COPY --from=build /app/dist/test /usr/share/nginx/html

COPY /nginx.conf  /etc/nginx/conf.d/default.conf
# Exposing a port, here it means that inside the container 
# the app will be using Port 80 while running
EXPOSE 80